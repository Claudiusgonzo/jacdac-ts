import { NumberFormat } from "./utils";
import { Device, Bus } from "./device";
export declare class Packet {
    _header: Uint8Array;
    _data: Uint8Array;
    timestamp: number;
    dev: Device;
    private constructor();
    static fromBinary(buf: Uint8Array): Packet;
    static from(service_command: number, data: Uint8Array): Packet;
    static onlyHeader(service_command: number): Packet;
    toBuffer(): Uint8Array;
    get device_identifier(): string;
    set device_identifier(id: string);
    get frame_flags(): number;
    get multicommand_class(): number;
    get size(): number;
    get requires_ack(): boolean;
    set requires_ack(ack: boolean);
    get service_number(): number;
    set service_number(service_number: number);
    get service_class(): number;
    get crc(): number;
    get service_command(): number;
    set service_command(cmd: number);
    get is_reg_set(): boolean;
    get is_reg_get(): boolean;
    get data(): Uint8Array;
    set data(buf: Uint8Array);
    get uintData(): number;
    get intData(): number;
    compress(stripped: Uint8Array[]): void;
    withFrameStripped(): Uint8Array;
    getNumber(fmt: NumberFormat, offset: number): number;
    get is_command(): boolean;
    get is_report(): boolean;
    toString(): string;
    sendCoreAsync(bus: Bus): Promise<void>;
    sendReportAsync(dev: Device): Promise<void>;
    sendCmdAsync(dev: Device): Promise<void>;
    sendAsMultiCommandAsync(bus: Bus, service_class: number): Promise<void>;
    static fromFrame(frame: Uint8Array, timestamp: number): Packet[];
}
