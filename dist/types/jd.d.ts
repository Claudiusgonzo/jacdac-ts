/// <reference types="node" />
import * as U from "./pxtutils";
export declare const REG_INTENSITY = 1;
export declare const REG_VALUE = 2;
export declare const REG_IS_STREAMING = 3;
export declare const REG_STREAMING_INTERVAL = 4;
export declare const REG_LOW_THRESHOLD = 5;
export declare const REG_HIGH_THRESHOLD = 6;
export declare const REG_MAX_POWER = 7;
export declare const REG_READING = 257;
export declare const CMD_GET_REG = 4096;
export declare const CMD_SET_REG = 8192;
export declare const CMD_TOP_MASK = 61440;
export declare const CMD_REG_MASK = 4095;
export declare const CMD_ADVERTISEMENT_DATA = 0;
export declare const CMD_EVENT = 1;
export declare const CMD_CALIBRATE = 2;
export declare const CMD_GET_DESCRIPTION = 3;
export declare const CMD_CTRL_NOOP = 128;
export declare const CMD_CTRL_IDENTIFY = 129;
export declare const CMD_CTRL_RESET = 130;
export declare const STREAM_PORT_SHIFT = 7;
export declare const STREAM_COUNTER_MASK = 31;
export declare const STREAM_CLOSE_MASK = 32;
export declare const STREAM_METADATA_MASK = 64;
export declare const JD_SERIAL_HEADER_SIZE = 16;
export declare const JD_SERIAL_MAX_PAYLOAD_SIZE = 236;
export declare const JD_SERVICE_NUMBER_MASK = 63;
export declare const JD_SERVICE_NUMBER_INV_MASK = 192;
export declare const JD_SERVICE_NUMBER_CRC_ACK = 63;
export declare const JD_SERVICE_NUMBER_STREAM = 62;
export declare const JD_SERVICE_NUMBER_CTRL = 0;
export declare const JD_FRAME_FLAG_COMMAND = 1;
export declare const JD_FRAME_FLAG_ACK_REQUESTED = 2;
export declare const JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS = 4;
export declare function shortDeviceId(devid: string): string;
export declare const deviceNames: U.SMap<string>;
export declare function setSendPacketFn(f: (p: Packet) => Promise<void>): void;
export declare function getDevices(): Device[];
export declare function getDevice(id: string): Device;
export declare class Device {
    deviceId: string;
    services: Uint8Array;
    lastSeen: number;
    lastServiceUpdate: number;
    currentReading: Uint8Array;
    private _shortId;
    constructor(deviceId: string);
    get name(): string;
    get shortId(): string;
    toString(): string;
    hasService(service_class: number): boolean;
    serviceAt(idx: number): number;
    sendCtrlCommand(cmd: number, payload?: Buffer): void;
}
export declare class Packet {
    _header: Uint8Array;
    _data: Uint8Array;
    timestamp: number;
    dev: Device;
    private constructor();
    static fromBinary(buf: Uint8Array): Packet;
    static from(service_command: number, data: Uint8Array): Packet;
    static onlyHeader(service_command: number): Packet;
    toBuffer(): Uint8Array;
    get device_identifier(): string;
    set device_identifier(id: string);
    get frame_flags(): number;
    get multicommand_class(): number;
    get size(): number;
    get requires_ack(): boolean;
    set requires_ack(ack: boolean);
    get service_number(): number;
    set service_number(service_number: number);
    get service_class(): number;
    get crc(): number;
    get service_command(): number;
    set service_command(cmd: number);
    get is_reg_set(): boolean;
    get is_reg_get(): boolean;
    get data(): Uint8Array;
    set data(buf: Uint8Array);
    get uintData(): number;
    get intData(): number;
    compress(stripped: Uint8Array[]): void;
    withFrameStripped(): Uint8Array;
    getNumber(fmt: U.NumberFormat, offset: number): number;
    get is_command(): boolean;
    get is_report(): boolean;
    toString(): string;
    sendCoreAsync(): Promise<any>;
    sendReportAsync(dev: Device): Promise<any>;
    sendCmdAsync(dev: Device): Promise<any>;
    sendAsMultiCommandAsync(service_class: number): Promise<any>;
    static fromFrame(frame: Uint8Array, timestamp: number): Packet[];
}
export declare function process(pkt: Packet): void;
