{"version":3,"sources":["webpack:///./src/pages/clients/web/dom.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,6BACA,oJACA,+BACA,oCAAmB,0BAAYC,WAAW,KAAvB,aAAnB,0BAAmG,+BAAGA,WAAW,KAAQ,CACrH,KAAQ,iCADuF,sBAAnG,MAGA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,uCAEL,4CACA,+JAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oGAOL,iCACA,+HACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gRAQL,qJACwB,0BAAYA,WAAW,KAAvB,kBADxB,WAEA,oFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mCAIL,4BAAW,+BAAGA,WAAW,KAAQ,CAC7B,KAAQ,qBADD,SAAX,qEAOJJ,EAAWK,gBAAiB","file":"component---src-pages-clients-web-dom-mdx-92e4d9c9124b7e2c5b02.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jacdac-ts/jacdac-ts/docs/src/components/layout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`DOM`}</h2>\n    <p>{`The DOM module is a depenency-free JavaScript library that implements Device, Service, Register and Packet data-structures.`}</p>\n    <h3>{`Setup`}</h3>\n    <p>{`Install the `}<inlineCode parentName=\"p\">{`jacdac-ts`}</inlineCode>{` npm package (see full `}<a parentName=\"p\" {...{\n        \"href\": \"/jacdac-ts/clients/web/setup\"\n      }}>{`setup instructions`}</a>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install --save-dev jacdac-ts\n`}</code></pre>\n    <h3>{`Connect to the bus`}</h3>\n    <p>{`You will need to connect to the JACDAC bus via WebUSB.\nThis needs to be done from a user action, like a click,\nfor security reasons.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { createUSBBus } from \"jacdac\"\n\nconst jd = createUSBBus();\nawait jd.connectAsync();\n`}</code></pre>\n    <h3>{`Devices`}</h3>\n    <p>{`Once you have the bus connected, you can register to events when device get connected or disconnected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { DEVICE_CONNECT, DEVICE_ANNOUNCE, DEVICE_DISCONNECT } from \"jacdac\"\n\njd.on(DEVICE_CONNECT, dev => console.log(\\`connect \\${dev}\\`)\njd.on(DEVICE_ANNOUNCE, dev => console.log(\\`disconnect \\${dev}\\`)\njd.on(DEVICE_DISCONNECT, dev => console.log(\\`announce \\${dev}\\`)\n`}</code></pre>\n    <p>{`Remember that when a device is first connected, it's list of services might not yet be populated.\nThis happens later on the `}<inlineCode parentName=\"p\">{`deviceannounce`}</inlineCode>{` event.`}</p>\n    <p>{`You can get a snapshot of the list of devices from the bus.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const devices = jd.devices()\n`}</code></pre>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/jacdac-ts/tools\"\n      }}>{`tools`}</a>{` for example of vanilla HTML/JavaScript pages using the library.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}